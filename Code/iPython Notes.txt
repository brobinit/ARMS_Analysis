%run -i name_of_file.py
	runs the file you're working on in textwrangler of textedit


CONTOURS
When finding contours:
	For better accuracy, use binary images.
		apply threshold or canny edge detection before finding contours
		

cv2.drawContours(im,contours,-1,(0,255,0),3)
	draws a 3-pixel wide green outline of the object


cv2.drawContours(im,contours,-1,(0,255,0),-1)
	fills the object with a particular color


len(contours)
	contours is a Python list, where it contains all objects boundary 
	points as separate lists	
	
cnt = contours[0]
	sets cnt to the first contour
cv2.drawContours(im,[cnt],0,(255,0,0),-1)
	draws cnt only
	
	
	
MASKING
used to isolate a part of the image and do operations on that part only 
without affecting or operating on other parts of the image.
Also considered ROI(Region of Interest) which can have any shape.

1. Find contours (adjust threshold to detect all)
2. Create a mask image where all elements are 0 with size sames as source, but single 
channel (grayscale).
3. For each contour, draw it on the mask image filled with white color.
4. (for finding mean color) Find mean using mean() function, taking out mask as operating
mask. 

for h, cnt in enumerate(contours):
	mask = np.zeros(gray.shape, np.uint8)
	cv2.drawContours(mask,[cnt],0,255,-1)
	mean = cv2.mean(im,mask = mask)
	


IMAGE MOMENTS
Help you calculate some features like center of mass of the object, area of the object, 
etc. en.wikipedia.org/wiki/Image_moment

cv2.moments(cnt)
	gives a dictionary of moment values calculated
	
area = moments['m00']
	finds the area of the object
	


CONTOUR AREA
same as number of pixels inside the contour. Can be found using cv2.contourArea()

area = cv2.contourArea(cnt)

CONTOUR PERIMETER
AKA arc length. Found using cv2.arcLength()

primeter = cv2.arcLength(cnt,True)



CONTOUR APPROXIMATION
Will remove small curves, thereby approximating the contour more to a straight line.
Done using cv2.approxPolyDP() function.

EX: to find perfect rectangle:
arrox = cv2.approxPolyDP(cnt,0.1*cv2.arcLength(cnt,True),True)

o.1 = epsilon, which is max distance from contour to approximate contour. 
	accuracy parameter. ^^^ taken as 10% arc length. % would be 0.01
	


CONVEX HULL
Similar to approximation, but not. cv2.convexHull() function checks curve for convexity 
defects and corrects it. Generally, convext curves are always bulged out or flat. Bulged 
inside is called convexity defect and is fixed with this. 

hull = cv2.convexHull(points[, hull[, clockwise[, returnPoints]]])

	points are the contours we pass in to.
	hull is the output, normally we avoid it.
	Direction : Orientation flag. if it is true, the output convex hull is oriented 
	clockwise.  Otherwise, it is oriented counter-clockwise. 
	
hull = cv2.convexHull(cnt)

if you print hull, you get a list, where each value denotes the corners of the image

returnPoints is always set to true, where it returns the coordinates. if set to False, it 
returns the indices of those convex hull points with respect to the contours.
Ex:

hull = cv2.convexHull(cnt,returnPoints = False)

Necessary when we find the convexity defects. Need to pass the new indices when printing to 
cv2.convexityDefects() function to find convexity defects. 




IS CONTOUR CONVEX
returns true or false

k = cv2.isContourConvex(cnt)



BOUNDING RECTANGLE
Two types of bounding rectangles:
	1. upright bounding rectange
	
	(x,y) is the starting coordinate of rectangle and (w,h) is its width and height.
	
	x,y,w,h = cv2.boundingRect(cnt)
	cv2.rectangle(im,(x,y),(x+q,y+h),(0,255,0),2)
	
	2. rotated rectangle
	
	rect = cv2.minAreaRect(cnt)
	box = cv2.cv.BoxPoints(rect)
	box = np.int0(box)
	cv2.drawContours(im,[box],0,(0,0,255),2)
	
	
	
	
MINIMUM ENCLOSING CIRCLE

(x,y),radius = cv2.minEnclosingCircle(cnt)
center = (int(x),int(y))
radius = int(radius)
cv2.circle(im,center,radius,(0,255,0),2)




FIT ELLIPSE
Returns rotated rectangle in which the ellipse is inscribed.

ellipse = cv2.fitEllipse(cnt)
cv2.ellipse(im,ellipse,(0,255,0),2)




AREA AND PERIMETER
found using cv2.contourArea() and cv2.arcLength() functions, respectively.




CENTROID
found using cv2.Moments() where centroid defined as:

centroid_x = M10/M00 and centroid_y = M01/M00

M = cv2.moments(cnt)
centroid_x = int(M['m10']/M['m00'])
centroid_y = int(M['m01']/M['m00']

actual result obtained will be a 'float', so convert into 'int'




ASPECT RATIO
ratio of the width to height

x,y,w,h = cv2.boundingRect(cnt)
aspect_ratio = float(w)/h




EXTENT
ratio of contour area to bounding rectangle area

area = cv2.contourArea(cnt)
x,y,w,h = cv2.boundingRect(cnt)
rect_area = w*h
entent = float(area)/rect_area



SOLIDITY
ratio of contour area to its convex hull area

area - cv2.contourArea(cnt)
hull = cv2.convexHull(cnt)
hull_area = cv2.contourArea(hull)
solidity = float(area)/hull_area




EQUIVALENT DIAMETER
diameter of the circle whose area is the same as the contour area
Eq. Diameter = sqrt(r*A/pi) where A is area of contour.


area = cv2.contourArea(cnt)
equi_diameter = np.sqrt(4*area/np.pi)




ORIENTATION
angle at which object is directed

(x,y),(MA,ma),angle = cv2.fitEllipse(cnt)




PIXEL POINTS
In some cases, may need all points which compromises object. do here:

mask = np.zeros(imgray.shape,np.uint8)
cv2.drawContours(mask,[cnt],0,255,-1)
pixelpoints = np.transpose(np.nonzero(mask))



MAX AND MIN VALUE
found using a mask image

min_val, max_val, min_loc,max_loc = cv2.minMaxLoc(imgray,mask = mask)



MEAN COLOR OR MEAN INTENSITY
Finds average color of an object. or average intensity of object in grayscale mode

mean_val = cv2.mean(im,mask = mask)

Remember: if trying for color matching or color based object tracking, first convert 
image to HSV space, because HSV is more better representation of color than RGB space.





EXTREME POINTS
topmost, bottommost, rightmost, leftmost points of object.

leftmost = tuple(cnt[cnt[:,:,0].argmin()][0])
rightmost = tuple(cnt[cnt[:,:,0].argmax()][0])
topmost = tuple(cnt[cnt[:,:,1].argmin()][0])
bottommost = tuple(cnt[cnt[:,:,1].argmax()][0])








